From e8551bf4100d640971e7ab443146ca87cdadce60 Mon Sep 17 00:00:00 2001
From: Michal Kowalczyk <michal.kowalczyk@plume.com>
Date: Wed, 1 Apr 2020 14:27:59 +0200
Subject: [PATCH 2/7] inet: inject br-wan and br-lan handling

As the OSN API doesn't allow to override L2 stuff we cannot fully
utilize it in case of RDK platform which has couple of specific
interfaces. Those interfaces resides on other CPU so we cannot access
them directly.
Those interfaces are accessed using devicenfo.sh script.
---
 src/lib/inet/src/inet_eth.c | 105 +++++++++++++++++++++++++++++++++++-
 1 file changed, 103 insertions(+), 2 deletions(-)

diff --git a/src/lib/inet/src/inet_eth.c b/src/lib/inet/src/inet_eth.c
index f1d88e5..a3ce8e8 100644
--- a/src/lib/inet/src/inet_eth.c
+++ b/src/lib/inet/src/inet_eth.c
@@ -39,6 +39,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include "inet.h"
 #include "inet_base.h"
 #include "inet_eth.h"
+#include "osync_hal.h"
 
 #include "execsh.h"
 
@@ -475,6 +476,15 @@ bool ifreq_ioctl(const char *ifname, int cmd, struct ifreq *req)
     return true;
 }
 
+/** On RDK some interfaces are on different CPU.
+ *  We must treat them separetely.
+ */
+static bool remote_interface(const char *ifname)
+{
+    return (!strcmp(ifname, CONFIG_RDK_LAN_BRIDGE_NAME)
+            || !strcmp(ifname, CONFIG_RDK_WAN_BRIDGE_NAME));
+}
+
 /**
  * Check if the interface exists
  */
@@ -482,6 +492,15 @@ bool ifreq_exists(const char *ifname, bool *exists)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        /* We don't have control over that interfaces.
+         * We must assume it always exists.
+         */
+        *exists = true;
+        return true;
+    }
+
     /* First get the current flags */
     if (!ifreq_ioctl(ifname, SIOCGIFINDEX, &ifr))
     {
@@ -503,6 +522,11 @@ bool ifreq_status_set(const char *ifname, bool up)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     /* First get the current flags */
     if (!ifreq_ioctl(ifname, SIOCGIFFLAGS, &ifr))
     {
@@ -542,6 +566,12 @@ bool ifreq_status_get(const char *ifname, bool *up)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        *up = true;
+        return true;
+    }
+
     /* First get the current flags */
     if (!ifreq_ioctl(ifname, SIOCGIFFLAGS, &ifr))
     {
@@ -564,6 +594,12 @@ bool ifreq_running_get(const char *ifname, bool *up)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        *up = true;
+        return true;
+    }
+
     /* First get the current flags */
     if (!ifreq_ioctl(ifname, SIOCGIFFLAGS, &ifr))
     {
@@ -585,6 +621,11 @@ bool ifreq_ipaddr_set(const char *ifname, osn_ip_addr_t ipaddr)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
     memcpy(&((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr.s_addr, &ipaddr, sizeof(ipaddr));
     if (!ifreq_ioctl(ifname, SIOCSIFADDR, &ifr))
@@ -605,9 +646,23 @@ bool ifreq_ipaddr_set(const char *ifname, osn_ip_addr_t ipaddr)
 bool ifreq_ipaddr_get(const char *ifname, osn_ip_addr_t *ipaddr)
 {
     struct ifreq ifr;
+    osync_hal_inet_iface_config_t iface_config;
 
     *ipaddr = OSN_IP_ADDR_INIT;
 
+    if (remote_interface(ifname))
+    {
+        memset(&iface_config, 0, sizeof(iface_config));
+        if (osync_hal_inet_get_iface_config(ifname, &iface_config)
+                != OSYNC_HAL_SUCCESS)
+        {
+            LOG(ERR, "RDK: cannot get iface config for %s", ifname);
+            return false;
+        }
+
+        return osn_ip_addr_from_str(ipaddr, iface_config.inet_addr);
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
 
     *ipaddr = OSN_IP_ADDR_INIT;
@@ -629,6 +684,11 @@ bool ifreq_netmask_set(const char *ifname, osn_ip_addr_t netmask)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
     ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr = netmask.ia_addr;
     if (!ifreq_ioctl(ifname, SIOCSIFNETMASK, &ifr))
@@ -650,9 +710,14 @@ bool ifreq_netmask_get(const char *ifname, osn_ip_addr_t *netmask)
 {
     struct ifreq ifr;
 
+    *netmask = OSN_IP_ADDR_INIT;
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
 
-    *netmask = OSN_IP_ADDR_INIT;
     if (!ifreq_ioctl(ifname, SIOCGIFNETMASK, &ifr))
     {
         return false;
@@ -674,6 +739,11 @@ bool ifreq_bcaddr_set(const char *ifname, osn_ip_addr_t bcaddr)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
     ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr = bcaddr.ia_addr;
     if (!ifreq_ioctl(ifname, SIOCSIFBRDADDR, &ifr))
@@ -697,6 +767,11 @@ bool ifreq_bcaddr_get(const char *ifname, osn_ip_addr_t *bcaddr)
 
     *bcaddr = OSN_IP_ADDR_INIT;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_addr.sa_family = AF_INET;
 
     if (!ifreq_ioctl(ifname, SIOCGIFBRDADDR, &ifr))
@@ -719,6 +794,11 @@ bool ifreq_mtu_set(const char *ifname, int mtu)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        return true;
+    }
+
     ifr.ifr_mtu = mtu;
 
     if (!ifreq_ioctl(ifname, SIOCSIFMTU, &ifr))
@@ -740,6 +820,12 @@ bool ifreq_mtu_get(const char *ifname, int *mtu)
 {
     struct ifreq ifr;
 
+    if (remote_interface(ifname))
+    {
+        *mtu = 1500;
+        return true;
+    }
+
     if (!ifreq_ioctl(ifname, SIOCGIFMTU, &ifr))
     {
         LOG(ERR, "inet_eth: %s: SIOCGIFMTU failed. Error retrieving the MTU: %s",
@@ -761,6 +847,22 @@ bool ifreq_mtu_get(const char *ifname, int *mtu)
 bool ifreq_hwaddr_get(const char *ifname, osn_mac_addr_t *macaddr)
 {
     struct ifreq ifr;
+    osync_hal_inet_iface_config_t iface_config;
+
+    *macaddr = OSN_MAC_ADDR_INIT;
+
+    if (remote_interface(ifname))
+    {
+        memset(&iface_config, 0, sizeof(iface_config));
+        if (osync_hal_inet_get_iface_config(ifname, &iface_config)
+                != OSYNC_HAL_SUCCESS)
+        {
+            LOG(ERR, "RDK: cannot get iface config for %s", ifname);
+            return false;
+        }
+
+        return osn_mac_addr_from_str(macaddr, iface_config.mac_str);
+    }
 
     /* Get the MAC(hardware) address */
     if (!ifreq_ioctl(ifname, SIOCGIFHWADDR, &ifr))
@@ -772,7 +874,6 @@ bool ifreq_hwaddr_get(const char *ifname, osn_mac_addr_t *macaddr)
         return false;
     }
 
-    *macaddr = OSN_MAC_ADDR_INIT;
     /* Copy the address */
     memcpy(macaddr->ma_addr, ifr.ifr_addr.sa_data, sizeof(macaddr->ma_addr));
 
-- 
2.25.1

